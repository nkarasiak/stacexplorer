/**\n * Standalone URL State Manager Script\n * Add this script to your HTML to enable URL state management\n * without modifying your existing app.js file\n */\n\n(function() {\n    console.log('\ud83d\udd17 Loading standalone URL state manager...');\n    \n    // Simple URL state management implementation\n    class SimpleURLStateManager {\n        constructor() {\n            this.state = {};\n            this.isUpdating = false;\n            this.updateTimeout = null;\n            \n            this.init();\n        }\n        \n        init() {\n            // Wait for app to be ready\n            this.waitForApp();\n            \n            // Handle browser navigation\n            window.addEventListener('popstate', () => {\n                this.restoreFromURL();\n            });\n        }\n        \n        waitForApp() {\n            if (window.stacExplorer?.inlineDropdownManager && window.stacExplorer?.aiSmartSearch) {\n                this.setupStateSync();\n                this.restoreFromURL();\n                this.addShareButton();\n                console.log('\u2705 URL state manager ready');\n            } else {\n                setTimeout(() => this.waitForApp(), 500);\n            }\n        }\n        \n        setupStateSync() {\n            const inlineManager = window.stacExplorer.inlineDropdownManager;\n            const aiSearch = window.stacExplorer.aiSmartSearch;\n            \n            // Override updateSearchSummary to capture state changes\n            const originalUpdate = inlineManager.updateSearchSummary;\n            inlineManager.updateSearchSummary = (fieldType, value) => {\n                originalUpdate.call(inlineManager, fieldType, value);\n                this.captureState();\n            };\n            \n            // Monitor AI search changes by watching for summary updates\n            this.setupMutationObserver();\n            \n            console.log('\ud83d\udd04 State synchronization set up');\n        }\n        \n        setupMutationObserver() {\n            const observer = new MutationObserver((mutations) => {\n                mutations.forEach((mutation) => {\n                    if (mutation.type === 'childList' || mutation.type === 'characterData') {\n                        // Check if search summary values changed\n                        const target = mutation.target;\n                        if (target.classList?.contains('search-summary-value') || \n                            target.closest?.('.search-summary-value')) {\n                            // Debounce state capture\n                            clearTimeout(this.updateTimeout);\n                            this.updateTimeout = setTimeout(() => {\n                                if (!this.isUpdating) {\n                                    this.captureState();\n                                }\n                            }, 100);\n                        }\n                    }\n                });\n            });\n            \n            // Observe search summary elements\n            const searchSummary = document.querySelector('.search-summary-interface');\n            if (searchSummary) {\n                observer.observe(searchSummary, {\n                    childList: true,\n                    subtree: true,\n                    characterData: true\n                });\n            }\n        }\n        \n        captureState() {\n            if (this.isUpdating) return;\n            \n            try {\n                const state = {};\n                \n                // Get AI search helper state\n                const aiHelper = window.stacExplorer.inlineDropdownManager?.aiSearchHelper;\n                if (aiHelper) {\n                    // Collection\n                    if (aiHelper.selectedCollection) {\n                        state.c = aiHelper.selectedCollection;\n                    }\n                    if (aiHelper.selectedCollectionSource) {\n                        state.cs = aiHelper.selectedCollectionSource;\n                    }\n                    \n                    // Location\n                    if (aiHelper.selectedLocation && \n                        aiHelper.selectedLocation !== 'everywhere' && \n                        Array.isArray(aiHelper.selectedLocation)) {\n                        state.lb = aiHelper.selectedLocation.join(',');\n                    }\n                    if (aiHelper.selectedLocationResult?.shortName && \n                        aiHelper.selectedLocationResult.shortName !== 'THE WORLD') {\n                        state.ln = aiHelper.selectedLocationResult.shortName;\n                    }\n                    \n                    // Date\n                    if (aiHelper.selectedDate && aiHelper.selectedDate.type !== 'anytime') {\n                        state.dt = aiHelper.selectedDate.type;\n                        if (aiHelper.selectedDate.start) {\n                            state.ds = aiHelper.selectedDate.start;\n                        }\n                        if (aiHelper.selectedDate.end) {\n                            state.de = aiHelper.selectedDate.end;\n                        }\n                    }\n                    \n                    // Cloud cover\n                    if (aiHelper.cloudCover && aiHelper.cloudCover !== 20) {\n                        state.cc = aiHelper.cloudCover;\n                    }\n                }\n                \n                this.updateURL(state);\n                \n            } catch (error) {\n                console.error('\u274c Error capturing state:', error);\n            }\n        }\n        \n        updateURL(state) {\n            const urlParams = new URLSearchParams();\n            \n            Object.keys(state).forEach(key => {\n                if (state[key] !== null && state[key] !== undefined && state[key] !== '') {\n                    urlParams.set(key, state[key]);\n                }\n            });\n            \n            const newURL = urlParams.toString() ? \n                `${window.location.pathname}?${urlParams.toString()}` : \n                window.location.pathname;\n            \n            if (newURL !== window.location.href) {\n                window.history.replaceState({ searchState: state }, '', newURL);\n                console.log('\ud83d\udd17 URL updated:', newURL);\n            }\n        }\n        \n        restoreFromURL() {\n            try {\n                this.isUpdating = true;\n                \n                const urlParams = new URLSearchParams(window.location.search);\n                \n                if (urlParams.toString()) {\n                    console.log('\ud83d\udd04 Restoring state from URL...');\n                    \n                    const inlineManager = window.stacExplorer?.inlineDropdownManager;\n                    const aiHelper = inlineManager?.aiSearchHelper;\n                    \n                    if (aiHelper) {\n                        // Restore collection\n                        const collection = urlParams.get('c');\n                        const collectionSource = urlParams.get('cs');\n                        if (collection !== null) {\n                            aiHelper.selectedCollection = collection || '';\n                            aiHelper.selectedCollectionSource = collectionSource || null;\n                            \n                            const displayName = collection ? this.getCollectionName(collection) : 'EVERYTHING';\n                            this.updateSummaryDirect('collection', displayName);\n                        }\n                        \n                        // Restore location\n                        const locationBbox = urlParams.get('lb');\n                        const locationName = urlParams.get('ln');\n                        if (locationBbox) {\n                            aiHelper.selectedLocation = locationBbox.split(',').map(Number);\n                            if (locationName) {\n                                aiHelper.selectedLocationResult = {\n                                    shortName: locationName,\n                                    formattedName: locationName,\n                                    bbox: aiHelper.selectedLocation\n                                };\n                            }\n                            this.updateSummaryDirect('location', locationName || 'CUSTOM LOCATION');\n                        }\n                        \n                        // Restore date\n                        const dateType = urlParams.get('dt');\n                        const dateStart = urlParams.get('ds');\n                        const dateEnd = urlParams.get('de');\n                        if (dateType) {\n                            aiHelper.selectedDate = {\n                                type: dateType,\n                                start: dateStart,\n                                end: dateEnd,\n                                preset: dateType !== 'custom' ? dateType : null\n                            };\n                            \n                            let displayText = 'ANYTIME';\n                            if (dateType === 'thismonth') {\n                                displayText = 'THIS MONTH';\n                            } else if (dateType === 'custom' && dateStart && dateEnd) {\n                                displayText = `${dateStart} to ${dateEnd}`.toUpperCase();\n                            }\n                            \n                            this.updateSummaryDirect('date', displayText);\n                            \n                            // Update form fields\n                            if (dateStart) {\n                                const startInput = document.getElementById('date-start');\n                                if (startInput) startInput.value = dateStart;\n                            }\n                            if (dateEnd) {\n                                const endInput = document.getElementById('date-end');\n                                if (endInput) endInput.value = dateEnd;\n                            }\n                        }\n                        \n                        // Restore cloud cover\n                        const cloudCover = urlParams.get('cc');\n                        if (cloudCover) {\n                            aiHelper.cloudCover = parseInt(cloudCover);\n                        }\n                    }\n                    \n                    // Show notification\n                    if (window.stacExplorer?.notificationService) {\n                        window.stacExplorer.notificationService.showNotification(\n                            '\ud83d\udd17 Search parameters restored from URL', 'info'\n                        );\n                    }\n                }\n                \n            } catch (error) {\n                console.error('\u274c Error restoring from URL:', error);\n            } finally {\n                setTimeout(() => {\n                    this.isUpdating = false;\n                }, 1000);\n            }\n        }\n        \n        updateSummaryDirect(fieldType, value) {\n            const summaryElement = document.querySelector(`[data-field=\"${fieldType}\"] .search-summary-value`);\n            if (summaryElement) {\n                summaryElement.textContent = value;\n            }\n        }\n        \n        getCollectionName(collectionId) {\n            const collections = window.stacExplorer?.inlineDropdownManager?.aiSearchHelper?.allAvailableCollections;\n            if (collections) {\n                const collection = collections.find(c => c.id === collectionId);\n                if (collection) {\n                    return collection.displayTitle || collection.title || collectionId;\n                }\n            }\n            return collectionId;\n        }\n        \n        addShareButton() {\n            // Add share button to search header\n            const searchHeader = document.getElementById('search-container-header');\n            if (searchHeader && !searchHeader.querySelector('.share-url-btn')) {\n                const shareBtn = document.createElement('button');\n                shareBtn.className = 'share-url-btn';\n                shareBtn.innerHTML = '<i class=\"material-icons\">share</i>';\n                shareBtn.title = 'Share search URL';\n                shareBtn.style.cssText = `\n                    background: none;\n                    border: none;\n                    color: var(--md-text-secondary);\n                    cursor: pointer;\n                    padding: 4px;\n                    border-radius: 4px;\n                    transition: all 0.2s ease;\n                    margin-left: 8px;\n                `;\n                \n                shareBtn.addEventListener('click', async (e) => {\n                    e.stopPropagation();\n                    try {\n                        await navigator.clipboard.writeText(window.location.href);\n                        if (window.stacExplorer?.notificationService) {\n                            window.stacExplorer.notificationService.showNotification(\n                                '\ud83d\udd17 Search URL copied to clipboard!', 'success'\n                            );\n                        }\n                    } catch (error) {\n                        console.error('Failed to copy URL:', error);\n                    }\n                });\n                \n                const headerContent = searchHeader.querySelector('.header-content') || searchHeader;\n                headerContent.appendChild(shareBtn);\n                \n                console.log('\ud83d\udd17 Share button added');\n            }\n        }\n        \n        // Public methods\n        getShareableURL() {\n            return window.location.href;\n        }\n        \n        clearURL() {\n            window.history.replaceState({}, '', window.location.pathname);\n            if (window.stacExplorer?.notificationService) {\n                window.stacExplorer.notificationService.showNotification(\n                    '\ud83d\uddd1\ufe0f URL parameters cleared', 'info'\n                );\n            }\n        }\n    }\n    \n    // Initialize when DOM is ready\n    function init() {\n        const urlStateManager = new SimpleURLStateManager();\n        \n        // Add to global scope\n        if (window.stacExplorer) {\n            window.stacExplorer.urlStateManager = urlStateManager;\n        } else {\n            window.stacExplorer = { urlStateManager };\n        }\n        \n        // Add global functions\n        window.copySearchURL = () => urlStateManager.getShareableURL();\n        window.clearSearchURL = () => urlStateManager.clearURL();\n        \n        console.log('\u2705 Standalone URL state manager initialized');\n        console.log('\ud83d\udcdd Available functions: copySearchURL(), clearSearchURL()');\n    }\n    \n    // Start initialization\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', init);\n    } else {\n        init();\n    }\n    \n})();\n\nconsole.log('\ud83d\udd17 Standalone URL state manager script loaded');\nconsole.log('\ud83c\udfaf Search parameters will now be synced to URL for sharing and bookmarking');\n