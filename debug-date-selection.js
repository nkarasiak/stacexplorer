/**\n * Quick Fix for Date Selection in TIME dropdown\n * Run this in browser console to test date selection\n */\n\nfunction testDateSelection() {\n    console.log('\ud83d\udcc5 Testing date selection in TIME dropdown');\n    \n    const inlineManager = window.stacExplorer?.inlineDropdownManager;\n    if (!inlineManager) {\n        console.error('\u274c InlineDropdownManager not found');\n        return;\n    }\n    \n    // Test \"This Month\" selection directly\n    console.log('\ud83d\udcc5 Testing \"This Month\" selection...');\n    inlineManager.handleDateSelection('thismonth');\n    \n    setTimeout(() => {\n        // Check if sidebar updated\n        const dateSummary = document.querySelector('[data-field=\"date\"] .search-summary-value');\n        if (dateSummary) {\n            console.log(`\u2705 Sidebar updated to: ${dateSummary.textContent}`);\n        }\n        \n        // Check form fields\n        const startInput = document.getElementById('date-start');\n        const endInput = document.getElementById('date-end');\n        \n        console.log(`\ud83d\udcc5 Start date: ${startInput?.value || 'not set'}`);\n        console.log(`\ud83d\udcc5 End date: ${endInput?.value || 'not set'}`);\n        \n        // Test \"Anytime\" selection\n        setTimeout(() => {\n            console.log('\ud83d\udcc5 Testing \"Anytime\" selection...');\n            inlineManager.handleDateSelection('anytime');\n            \n            setTimeout(() => {\n                console.log(`\u2705 Final sidebar value: ${dateSummary?.textContent}`);\n                console.log(`\ud83d\udcc5 Form fields cleared: start=${startInput?.value || 'empty'}, end=${endInput?.value || 'empty'}`);\n            }, 500);\n        }, 2000);\n    }, 500);\n}\n\n// Function to fix date dropdown options if they're missing data-value attributes\nfunction fixDateDropdownOptions() {\n    console.log('\ud83d\udd27 Checking and fixing date dropdown options...');\n    \n    // Wait for dropdown to be open\n    const dropdown = document.querySelector('.inline-dropdown-container[data-field=\"date\"]');\n    if (!dropdown) {\n        console.log('\u26a0\ufe0f No date dropdown found - open the TIME dropdown first');\n        return;\n    }\n    \n    // Fix missing data-value attributes\n    const options = dropdown.querySelectorAll('.ai-option');\n    console.log(`\ud83d\udd0d Found ${options.length} date options`);\n    \n    options.forEach((option, index) => {\n        const title = option.querySelector('.ai-option-title')?.textContent;\n        console.log(`Option ${index + 1}: \"${title}\"`);\n        \n        // Add missing data-value attributes based on title\n        if (title && !option.dataset.value) {\n            if (title.toLowerCase().includes('anytime')) {\n                option.dataset.value = 'anytime';\n                console.log('\u2705 Fixed: Added data-value=\"anytime\"');\n            } else if (title.toLowerCase().includes('month')) {\n                option.dataset.value = 'thismonth';\n                console.log('\u2705 Fixed: Added data-value=\"thismonth\"');\n            } else if (title.toLowerCase().includes('custom')) {\n                option.id = 'custom-date';\n                console.log('\u2705 Fixed: Added id=\"custom-date\"');\n            }\n        } else if (option.dataset.value) {\n            console.log(`\u2705 Already has data-value: ${option.dataset.value}`);\n        }\n    });\n    \n    console.log('\u2705 Date dropdown options check complete');\n}\n\n// Function to manually trigger date selection\nfunction manualDateSelect(dateType) {\n    console.log(`\ud83d\udcc5 Manually selecting date: ${dateType}`);\n    \n    const inlineManager = window.stacExplorer?.inlineDropdownManager;\n    if (inlineManager && inlineManager.handleDateSelection) {\n        inlineManager.handleDateSelection(dateType);\n        inlineManager.closeCurrentDropdown();\n        console.log(`\u2705 Date selection triggered: ${dateType}`);\n    } else {\n        console.error('\u274c Cannot trigger date selection');\n    }\n}\n\n// Auto-run when dropdown is detected\nfunction watchForDateDropdown() {\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            mutation.addedNodes.forEach((node) => {\n                if (node.nodeType === 1 && node.classList?.contains('inline-dropdown-container')) {\n                    if (node.dataset.field === 'date') {\n                        console.log('\ud83d\udcc5 Date dropdown detected - checking options...');\n                        setTimeout(() => fixDateDropdownOptions(), 100);\n                    }\n                }\n            });\n        });\n    });\n    \n    observer.observe(document.body, { childList: true, subtree: true });\n    console.log('\ud83d\udc41\ufe0f Watching for date dropdown...');\n}\n\n// Export functions for manual use\nwindow.testDateSelection = testDateSelection;\nwindow.fixDateDropdownOptions = fixDateDropdownOptions;\nwindow.manualDateSelect = manualDateSelect;\n\n// Start watching\nwatchForDateDropdown();\n\nconsole.log('\ud83d\udcc5 Date selection debug tools loaded');\nconsole.log('\ud83d\udcdd Available functions:');\nconsole.log('  - testDateSelection() - Test date selection directly');\nconsole.log('  - fixDateDropdownOptions() - Fix dropdown options (open TIME dropdown first)');\nconsole.log('  - manualDateSelect(\"thismonth\") - Manually select this month');\nconsole.log('  - manualDateSelect(\"anytime\") - Manually select anytime');\n