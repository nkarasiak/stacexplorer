/**\n * Performance Test Script for Inline Dropdowns\n * Run this in browser console to test the optimizations\n */\n\nfunction testInlineDropdownPerformance() {\n    console.log('üöÄ Testing Inline Dropdown Performance');\n    console.log('====================================');\n    \n    const inlineManager = window.stacExplorer?.inlineDropdownManager;\n    if (!inlineManager) {\n        console.error('‚ùå InlineDropdownManager not found');\n        return;\n    }\n    \n    const summaryItems = document.querySelectorAll('.search-summary-item');\n    if (summaryItems.length === 0) {\n        console.error('‚ùå No search summary items found');\n        return;\n    }\n    \n    console.log(`üìã Found ${summaryItems.length} search summary items`);\n    \n    // Test 1: Loading speed\n    console.log('\\nüß™ Test 1: Loading Speed');\n    console.log('------------------------');\n    \n    const collectionItem = Array.from(summaryItems).find(item => item.dataset.field === 'collection');\n    if (collectionItem) {\n        const startTime = performance.now();\n        \n        collectionItem.click();\n        \n        // Check for immediate loading dropdown\n        setTimeout(() => {\n            const loadingDropdown = document.querySelector('.loading-dropdown');\n            const loadTime = performance.now() - startTime;\n            \n            if (loadingDropdown) {\n                console.log(`‚úÖ Loading dropdown appeared in ${loadTime.toFixed(2)}ms`);\n                \n                // Wait for content to load\n                setTimeout(() => {\n                    const contentDropdown = document.querySelector('.inline-dropdown-container:not(.loading-dropdown)');\n                    const totalTime = performance.now() - startTime;\n                    \n                    if (contentDropdown) {\n                        console.log(`‚úÖ Content loaded in ${totalTime.toFixed(2)}ms total`);\n                        \n                        // Close dropdown\n                        if (inlineManager.closeCurrentDropdown) {\n                            inlineManager.closeCurrentDropdown();\n                        }\n                        \n                        // Test 2: Multiple click prevention\n                        setTimeout(() => testMultipleClickPrevention(), 1000);\n                    } else {\n                        console.error('‚ùå Content failed to load');\n                    }\n                }, 2000);\n            } else {\n                console.error(`‚ùå Loading dropdown did not appear (${loadTime.toFixed(2)}ms)`);\n            }\n        }, 50);\n    }\n}\n\nfunction testMultipleClickPrevention() {\n    console.log('\\nüß™ Test 2: Multiple Click Prevention');\n    console.log('-----------------------------------');\n    \n    const summaryItems = document.querySelectorAll('.search-summary-item');\n    const inlineManager = window.stacExplorer?.inlineDropdownManager;\n    \n    // Rapid click test\n    console.log('Performing rapid clicks...');\n    \n    let clickCount = 0;\n    const rapidClickTest = () => {\n        if (clickCount < 3) {\n            const item = summaryItems[clickCount % summaryItems.length];\n            console.log(`Click ${clickCount + 1}: ${item.dataset.field}`);\n            item.click();\n            clickCount++;\n            setTimeout(rapidClickTest, 100);\n        } else {\n            // Check results\n            setTimeout(() => {\n                const dropdowns = document.querySelectorAll('.inline-dropdown-container');\n                console.log(`Found ${dropdowns.length} dropdown(s) after rapid clicking`);\n                \n                if (dropdowns.length <= 1) {\n                    console.log('‚úÖ Multiple dropdown prevention working correctly');\n                } else {\n                    console.error('‚ùå Multiple dropdowns detected - fix needed');\n                }\n                \n                // Clean up\n                if (inlineManager.closeCurrentDropdown) {\n                    inlineManager.closeCurrentDropdown();\n                }\n                \n                // Test 3: Drawing interference\n                setTimeout(() => testDrawingInterference(), 1000);\n            }, 500);\n        }\n    };\n    \n    rapidClickTest();\n}\n\nfunction testDrawingInterference() {\n    console.log('\\nüß™ Test 3: Drawing Interference Prevention');\n    console.log('------------------------------------------');\n    \n    const mapManager = window.stacExplorer?.mapManager;\n    const inlineManager = window.stacExplorer?.inlineDropdownManager;\n    \n    if (!mapManager) {\n        console.error('‚ùå MapManager not found');\n        return;\n    }\n    \n    if (!inlineManager.originalStartDrawing) {\n        console.error('‚ùå Drawing interception not set up');\n        return;\n    }\n    \n    console.log('‚úÖ Drawing interception is set up');\n    console.log('‚úÖ Map drawing should not open fullscreen AI search');\n    \n    // Test cache performance\n    setTimeout(() => testCachePerformance(), 1000);\n}\n\nfunction testCachePerformance() {\n    console.log('\\nüß™ Test 4: Cache Performance');\n    console.log('-----------------------------');\n    \n    const inlineManager = window.stacExplorer?.inlineDropdownManager;\n    \n    if (inlineManager.collectionsCache) {\n        console.log(`‚úÖ Collections cache active with ${inlineManager.collectionsCache.length} items`);\n        console.log(`üìÖ Cache timestamp: ${new Date(inlineManager.cacheTimestamp).toLocaleTimeString()}`);\n        \n        const cacheAge = (Date.now() - inlineManager.cacheTimestamp) / 1000;\n        console.log(`‚è±Ô∏è Cache age: ${cacheAge.toFixed(1)} seconds`);\n        \n        if (cacheAge < 300) { // 5 minutes\n            console.log('‚úÖ Cache is fresh and valid');\n        } else {\n            console.log('‚ö†Ô∏è Cache is getting old, will refresh soon');\n        }\n    } else {\n        console.log('‚ö†Ô∏è Collections cache not yet populated - will be faster after first use');\n    }\n    \n    console.log('\\nüéâ Performance Test Complete!');\n    console.log('=============================');\n    console.log('‚úÖ All optimizations verified');\n    console.log('‚ö° Dropdowns should now be much faster');\n    console.log('üéØ Only one dropdown can be open at a time');\n    console.log('üö´ Map drawing will not open fullscreen interface');\n}\n\n// Auto-run after delay\nsetTimeout(() => {\n    console.log('üöÄ Auto-running performance test...');\n    testInlineDropdownPerformance();\n}, 2000);\n\n// Export for manual use\nwindow.testInlineDropdownPerformance = testInlineDropdownPerformance;\n\nconsole.log('üîß Performance test script loaded');\nconsole.log('üí° Run testInlineDropdownPerformance() to test manually');\n